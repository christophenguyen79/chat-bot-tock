"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = require("url");
var websocket_1 = require("websocket");
var utils_1 = require("./utils");
var Bot = /** @class */ (function () {
    function Bot(apiKey, host) {
        var _this = this;
        this.apiKey = apiKey;
        this.host = host;
        this.queue = [];
        this.userData = {};
        this.userMessageBuffer = {};
        this.storyDefinitions = {};
        this.addStory = function (intent) {
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            _this.storyDefinitions[intent] = handlers;
        };
        this.sendData = function (data) {
            if (_this.connection && _this.connection.connected) {
                _this.connection.sendUTF(data);
            }
            else {
                _this.queue.push(data);
                _this.executeQueue();
            }
        };
        this.setPersistUser = function (persistUser) {
            _this.persistUser = persistUser;
        };
        this.setRetrieveUser = function (retrieveUser) {
            _this.retrieveUser = retrieveUser;
        };
        this.createBotInterface = function (botRequest) { return __awaiter(_this, void 0, void 0, function () {
            var userData, dispatchUserData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserData(botRequest)];
                    case 1:
                        userData = _a.sent();
                        return [4 /*yield*/, this.createUserDispatch(botRequest)];
                    case 2:
                        dispatchUserData = _a.sent();
                        return [2 /*return*/, {
                                send: function (input) {
                                    var quickReplies = [];
                                    for (var _i = 1; _i < arguments.length; _i++) {
                                        quickReplies[_i - 1] = arguments[_i];
                                    }
                                    var userRequest = botRequest.botRequest;
                                    var userId = userRequest.context.userId.id;
                                    var message = typeof input === 'string'
                                        ? {
                                            delay: 0,
                                            suggestions: quickReplies,
                                            text: utils_1.i18nText(input),
                                            type: 'sentence',
                                        }
                                        : input;
                                    _this.userMessageBuffer[userId] = Array.isArray(_this.userMessageBuffer[userId])
                                        ? __spreadArrays(_this.userMessageBuffer[userId], [message]) : [message];
                                    return message;
                                },
                                userData: userData,
                                userContext: userData,
                                dispatchUserData: dispatchUserData,
                                dispatchUserContext: dispatchUserData,
                                setUserContext: dispatchUserData,
                                setUserData: dispatchUserData,
                                runStory: function (intent) { return __awaiter(_this, void 0, void 0, function () {
                                    var userRequest, i, botInterface;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                userRequest = botRequest.botRequest;
                                                if (!this.storyDefinitions[intent]) return [3 /*break*/, 5];
                                                i = 0;
                                                _a.label = 1;
                                            case 1:
                                                if (!(i < this.storyDefinitions[intent].length)) return [3 /*break*/, 5];
                                                return [4 /*yield*/, this.createBotInterface(botRequest)];
                                            case 2:
                                                botInterface = _a.sent();
                                                return [4 /*yield*/, this.storyDefinitions[intent][i](botInterface, userRequest)];
                                            case 3:
                                                _a.sent();
                                                _a.label = 4;
                                            case 4:
                                                i++;
                                                return [3 /*break*/, 1];
                                            case 5: return [2 /*return*/];
                                        }
                                    });
                                }); },
                                entities: botRequest.botRequest.entities.reduce(function (prev, cur) {
                                    var _a;
                                    return (__assign(__assign({}, prev), (_a = {}, _a[cur.type] = prev[cur.type] ? __spreadArrays(prev[cur.type], [cur.content]) : [cur.content], _a)));
                                }, {}),
                                query: botRequest.botRequest.message.type === 'text'
                                    ? botRequest.botRequest.message.text
                                    : undefined,
                            }];
                }
            });
        }); };
        this.executeQueue = function () {
            if (_this.queue.length > 0 && !_this.queueTimer) {
                _this.queueTimer = setInterval(function () {
                    var data = _this.queue.shift();
                    if (data) {
                        if (_this.connection && _this.connection.connected) {
                            _this.connection.sendUTF(data);
                        }
                        else {
                            _this.queue.push(data);
                        }
                    }
                    else {
                        clearInterval(_this.queueTimer);
                        _this.queueTimer = undefined;
                    }
                });
            }
        };
        this.getUserData = function (botRequest) {
            var userId = botRequest.botRequest.context.userId.id;
            if (_this.retrieveUser) {
                return _this.userData[userId] || _this.retrieveUser(userId);
            }
            return _this.userData[userId];
        };
        this.createUserDispatch = function (botRequest) {
            var userId = botRequest.botRequest.context.userId.id;
            if (!_this.userData[userId]) {
                _this.userData[userId] = {};
            }
            return function (input) {
                if (typeof input === 'function') {
                    _this.userData[userId] = input(_this.userData[userId]);
                }
                else {
                    _this.userData[userId] = input;
                }
                if (_this.persistUser) {
                    return _this.persistUser(userId, _this.userData[userId]);
                }
            };
        };
        this.handleBotRequest = function (request) { return __awaiter(_this, void 0, void 0, function () {
            var userRequest, userId, i, botInterface, response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        userRequest = request.botRequest;
                        if (!(userRequest.intent && this.storyDefinitions[userRequest.intent])) return [3 /*break*/, 6];
                        userId = userRequest.context.userId.id;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.storyDefinitions[userRequest.intent].length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.createBotInterface(request)];
                    case 2:
                        botInterface = _a.sent();
                        return [4 /*yield*/, this.storyDefinitions[userRequest.intent][i](botInterface, userRequest)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        // if send has been used there should be data in the buffer
                        if (Array.isArray(this.userMessageBuffer[userId]) &&
                            this.userMessageBuffer[userId].length > 0) {
                            response = {
                                botResponse: {
                                    context: {
                                        date: new Date(),
                                        requestId: request.requestId,
                                    },
                                    entities: [],
                                    messages: this.userMessageBuffer[userId],
                                    storyId: userRequest.storyId,
                                },
                                requestId: request.requestId,
                            };
                            this.sendData(JSON.stringify(response));
                            // clear buffer
                            this.userMessageBuffer[userId] = [];
                        }
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        // not JSON or invalid request
                        console.log('WebSocket message error', error_1.toString());
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); };
        var client = new websocket_1.client();
        var srcUrl = url_1.parse(host);
        var wsUrl = new url_1.URL("/" + apiKey, "wss://" + srcUrl.host);
        client.on('connectFailed', function (error) {
            console.log("Connect failed: " + error.toString());
        });
        client.on('connect', function (connection) {
            console.log('Connection established');
            _this.connection = connection;
            connection.on('error', function (error) {
                console.log("Connection error: " + error.toString());
            });
            connection.on('close', function () {
                console.log('Connection closed. Reconnecting...');
                client.connect(wsUrl.toString());
            });
            connection.on('message', function (message) {
                if (message.type === 'utf8' && message.utf8Data) {
                    try {
                        var request = JSON.parse(message.utf8Data);
                        _this.handleBotRequest(request);
                    }
                    catch (error) {
                        // not a JSON response
                        console.log(error.toString());
                    }
                }
            });
        });
        client.connect(wsUrl.toString());
    }
    return Bot;
}());
exports.Bot = Bot;
//# sourceMappingURL=Bot.js.map